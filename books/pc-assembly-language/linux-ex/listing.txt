     1                                  
     2                                  
     3                                  ;
     4                                  ; file: first.asm
     5                                  ; First assembly program. This program asks for two integers as
     6                                  ; input and prints out their sum.
     7                                  ;
     8                                  ; To create executable:
     9                                  ; Using djgpp:
    10                                  ; nasm -f coff first.asm
    11                                  ; gcc -o first first.o driver.c asm_io.o
    12                                  ;
    13                                  ; Using Linux and gcc:
    14                                  ; nasm -f elf first.asm
    15                                  ; gcc -o first first.o driver.c asm_io.o
    16                                  ;
    17                                  ; Using Borland C/C++
    18                                  ; nasm -f obj first.asm
    19                                  ; bcc32 first.obj driver.c asm_io.obj
    20                                  ;
    21                                  ; Using MS C/C++
    22                                  ; nasm -f win32 first.asm
    23                                  ; cl first.obj driver.c asm_io.obj
    24                                  ;
    25                                  ; Using Open Watcom
    26                                  ; nasm -f obj first.asm
    27                                  ; wcl386 first.obj driver.c asm_io.obj
    28                                  
    29                                  %include "asm_io.inc"
     1                              <1> 	extern  read_int, print_int, print_string
     2                              <1> 	extern	read_char, print_char, print_nl
     3                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     4                              <1> 
     5                              <1> %macro 	dump_regs 1
     6                              <1> 	push	  dword %1
     7                              <1> 	call	  sub_dump_regs
     8                              <1> %endmacro
     9                              <1> 
    10                              <1> 
    11                              <1> ;
    12                              <1> ; usage: dump_mem label, start-address, # paragraphs
    13                              <1> %macro  dump_mem 3
    14                              <1> 	push	 dword %1
    15                              <1> 	push	 dword %2
    16                              <1> 	push	 dword %3
    17                              <1> 	call	 sub_dump_mem
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> %macro	dump_math 1
    21                              <1> 	push	 dword %1
    22                              <1> 	call	 sub_dump_math
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro  dump_stack 3
    26                              <1> 	push	 dword %3
    27                              <1>         push     dword %2
    28                              <1> 	push	 dword %1
    29                              <1>         call     sub_dump_stack
    30                              <1> %endmacro
    30                                  ;
    31                                  ; initialized data is put in the .data segment
    32                                  ;
    33                                  segment .data
    34                                  ;
    35                                  ; These labels refer to strings used for output
    36                                  ;
    37 00000000 456E7465722061206E-     prompt1 db    "Enter a number: ", 0       ; don't forget nul terminator
    37 00000009 756D6265723A2000   
    38 00000011 456E74657220616E6F-     prompt2 db    "Enter another number: ", 0
    38 0000001A 74686572206E756D62-
    38 00000023 65723A2000         
    39 00000028 596F7520656E746572-     outmsg1 db    "You entered ", 0
    39 00000031 65642000           
    40 00000035 20616E642000            outmsg2 db    " and ", 0
    41 0000003B 2C207468652073756D-     outmsg3 db    ", the sum of these is ", 0
    41 00000044 206F66207468657365-
    41 0000004D 2069732000         
    42                                  
    43                                  
    44                                  ;
    45                                  ; uninitialized data is put in the .bss segment
    46                                  ;
    47                                  segment .bss
    48                                  ;
    49                                  ; These labels refer to double words used to store the inputs
    50                                  ;
    51 00000000 <res 00000004>          input1  resd 1
    52 00000004 <res 00000004>          input2  resd 1
    53                                  
    54                                   
    55                                  
    56                                  ;
    57                                  ; code is put in the .text segment
    58                                  ;
    59                                  segment .text
    60                                          global  asm_main
    61                                  asm_main:
    62 00000000 C8000000                        enter   0,0               ; setup routine
    63 00000004 60                              pusha
    64                                  
    65 00000005 B8[00000000]                    mov     eax, prompt1      ; print out prompt
    66 0000000A E8(00000000)                    call    print_string
    67                                  
    68 0000000F E8(00000000)                    call    read_int          ; read integer
    69 00000014 A3[00000000]                    mov     [input1], eax     ; store into input1
    70                                  
    71 00000019 B8[11000000]                    mov     eax, prompt2      ; print out prompt
    72 0000001E E8(00000000)                    call    print_string
    73                                  
    74 00000023 E8(00000000)                    call    read_int          ; read integer
    75 00000028 A3[04000000]                    mov     [input2], eax     ; store into input2
    76                                  
    77 0000002D A1[00000000]                    mov     eax, [input1]     ; eax = dword at input1
    78 00000032 0305[04000000]                  add     eax, [input2]     ; eax += dword at input2
    79 00000038 89C3                            mov     ebx, eax          ; ebx = eax
    80                                          dump_regs 1               ; dump out register values
    80 0000003A 6A01                <1>  push dword %1
    80 0000003C E8(00000000)        <1>  call sub_dump_regs
    81                                          dump_mem 2, outmsg1, 1    ; dump out memory
    81 00000041 6A02                <1>  push dword %1
    81 00000043 68[28000000]        <1>  push dword %2
    81 00000048 6A01                <1>  push dword %3
    81 0000004A E8(00000000)        <1>  call sub_dump_mem
    82                                  ;
    83                                  ; next print out result message as series of steps
    84                                  ;
    85 0000004F B8[28000000]                    mov     eax, outmsg1
    86 00000054 E8(00000000)                    call    print_string      ; print out first message
    87 00000059 A1[00000000]                    mov     eax, [input1]     
    88 0000005E E8(00000000)                    call    print_int         ; print out input1
    89 00000063 B8[35000000]                    mov     eax, outmsg2
    90 00000068 E8(00000000)                    call    print_string      ; print out second message
    91 0000006D A1[04000000]                    mov     eax, [input2]
    92 00000072 E8(00000000)                    call    print_int         ; print out input2
    93 00000077 B8[3B000000]                    mov     eax, outmsg3
    94 0000007C E8(00000000)                    call    print_string      ; print out third message
    95 00000081 89D8                            mov     eax, ebx
    96 00000083 E8(00000000)                    call    print_int         ; print out sum (ebx)
    97 00000088 E8(00000000)                    call    print_nl          ; print new-line
    98                                  
    99 0000008D 61                              popa
   100 0000008E B800000000                      mov     eax, 0            ; return back to C
   101 00000093 C9                              leave                     
   102 00000094 C3                              ret
   103                                  
   104                                  
